// scripts/test-pages.js
// Script ŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© ‚ö°

const http = require('http');

const BASE_URL = 'http://localhost:3000';

const PAGES_TO_TEST = [
  { path: '/', name: 'ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©' },
  { path: '/properties', name: 'ÿßŸÑÿπŸÇÿßÿ±ÿßÿ™' },
  { path: '/auctions', name: 'ÿßŸÑŸÖÿ≤ÿßÿØÿßÿ™' },
  { path: '/calendar', name: 'ÿßŸÑÿ™ŸÇŸàŸäŸÖ' },
  { path: '/performance-demo', name: 'ÿµŸÅÿ≠ÿ© ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ©' },
  { path: '/partners', name: 'ÿßŸÑÿ¥ÿ±ŸÉÿßÿ°' },
  { path: '/about', name: 'ŸÖŸÜ ŸÜÿ≠ŸÜ' },
  { path: '/contact', name: 'ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß' },
];

async function testPage(path, name) {
  return new Promise((resolve) => {
    const startTime = Date.now();
    
    http.get(`${BASE_URL}${path}`, (res) => {
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      const status = res.statusCode;
      const statusEmoji = status === 200 ? '‚úÖ' : status === 404 ? '‚ùå' : '‚ö†Ô∏è';
      
      console.log(`${statusEmoji} ${name.padEnd(20)} | ${path.padEnd(30)} | Status: ${status} | Time: ${responseTime}ms`);
      
      resolve({
        path,
        name,
        status,
        responseTime,
        success: status === 200
      });
    }).on('error', (err) => {
      console.log(`‚ùå ${name.padEnd(20)} | ${path.padEnd(30)} | Error: ${err.message}`);
      resolve({
        path,
        name,
        status: 0,
        responseTime: 0,
        success: false,
        error: err.message
      });
    });
  });
}

async function runTests() {
  console.log('\nüß™ ÿ®ÿØÿ° ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©...\n');
  console.log('‚ïê'.repeat(90));
  console.log('ÿßŸÑÿ≠ÿßŸÑÿ© | ÿßŸÑÿßÿ≥ŸÖ              | ÿßŸÑŸÖÿ≥ÿßÿ±                         | ÿßŸÑÿ≠ÿßŸÑÿ© + ÿßŸÑŸàŸÇÿ™');
  console.log('‚ïê'.repeat(90));
  
  const results = [];
  
  for (const page of PAGES_TO_TEST) {
    const result = await testPage(page.path, page.name);
    results.push(result);
    // ÿßŸÜÿ™ÿ∏ÿ± ŸÇŸÑŸäŸÑÿßŸã ÿ®ŸäŸÜ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log('‚ïê'.repeat(90));
  console.log('\nüìä ŸÖŸÑÿÆÿµ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨:\n');
  
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;
  
  console.log(`‚úÖ ŸÜÿ¨ÿ≠: ${successful}/${results.length}`);
  console.log(`‚ùå ŸÅÿ¥ŸÑ: ${failed}/${results.length}`);
  console.log(`‚ö° ŸÖÿ™Ÿàÿ≥ÿ∑ ŸàŸÇÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©: ${Math.round(avgResponseTime)}ms`);
  
  if (failed > 0) {
    console.log('\n‚ö†Ô∏è ÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑŸÅÿßÿ¥ŸÑÿ©:');
    results.filter(r => !r.success).forEach(r => {
      console.log(`   - ${r.name} (${r.path})`);
    });
  }
  
  console.log('\n' + '‚ïê'.repeat(90));
  
  if (avgResponseTime < 100) {
    console.log('üöÄ ÿßŸÑÿ£ÿØÿßÿ° ŸÖŸÖÿ™ÿßÿ≤! ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ© ÿ¨ÿØÿßŸã!');
  } else if (avgResponseTime < 500) {
    console.log('‚úÖ ÿßŸÑÿ£ÿØÿßÿ° ÿ¨ŸäÿØ! ÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿ™ÿπŸÖŸÑ ÿ®ÿ¥ŸÉŸÑ ÿ¨ŸäÿØ.');
  } else {
    console.log('‚ö†Ô∏è ÿßŸÑÿ£ÿØÿßÿ° ŸÖÿ™Ÿàÿ≥ÿ∑. ŸÇÿØ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ®ÿπÿ∂ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜÿßÿ™.');
  }
  
  console.log('\n');
}

// ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™
runTests().catch(console.error);

